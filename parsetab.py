
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AUTO BAND BANDEQU BOOL BOR BOREQU BREAK CASE CEQ CGE CGT CHAR CHARACTER CLE CLT CNEQ COLON COMMA COMMETBLOCK COMMETLINE CONTINUE DECIMAL DEFAULT DIVIDE DIVIDEQU DO DOUBLE ELSE EQUAL FALSE FLOAT FOR GOTO IDENTIFIER IF IN INCLUDE INT INV LBRACE LPAREN LSQUARE MINUS MINUSELF MINUSEQU MULTI MULTIEQU NOT NUMBER OF OR PLUS PLUSELF PLUSEQU RBRACE RETURN RPAREN RSQUARE SEMICOLON STRING SWITCH TRUE VOID WHILE\n    program : functions\n            | e\n    \n    e :\n    \n    functions : function\n              | function functions\n    \n    function : func_ret IDENTIFIER LPAREN params RPAREN block\n             | func_ret IDENTIFIER LPAREN RPAREN block\n    \n    func_ret : VOID\n             | ARRAY\n             | var_type\n    \n    var_type : INT\n             | DOUBLE\n             | FLOAT\n             | CHAR\n             | BOOL\n    \n    params : param\n           | param COMMA params\n    \n    param : var_type IDENTIFIER\n          | var_type IDENTIFIER LSQUARE RSQUARE\n          | ARRAY IDENTIFIER\n    \n    block : LBRACE e RBRACE\n          | LBRACE statements RBRACE\n    \n    statements : statement\n               | statement statements\n    \n    statement : declaration SEMICOLON\n              | lambda_call SEMICOLON\n              | expression SEMICOLON\n              | return SEMICOLON\n              | BREAK SEMICOLON\n              | CONTINUE SEMICOLON\n              | for_block\n              | while_block\n              | do_while_block\n              | if_block\n              | switch_block\n              | for_in_block\n              | for_of_block\n    \n    switch_block : SWITCH LPAREN expression RPAREN LBRACE case_blocks RBRACE\n    \n    case_blocks : e\n                | default_block\n                | case_block case_blocks\n    \n    case_block : CASE expression COLON block\n    \n    default_block : DEFAULT COLON block\n    \n    if_block : IF LPAREN expression RPAREN block elif_blocks\n    \n    elif_blocks : e\n                | else_block\n                | elif_block elif_blocks\n    \n    elif_block : ELSE IF LPAREN expression RPAREN block\n    \n    else_block : ELSE block\n    \n    for_block : FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_update RPAREN block\n    \n    for_init : e\n             | declaration\n             | expression\n    \n    for_cond : e\n             | expression\n    \n    for_update : e\n               | expression\n    \n    for_in_block : FOR LPAREN IDENTIFIER IN IDENTIFIER RPAREN block\n    \n    for_of_block : FOR LPAREN IDENTIFIER OF IDENTIFIER RPAREN block\n    \n    while_block : WHILE LPAREN expression RPAREN block\n    \n    do_while_block : DO block WHILE LPAREN expression RPAREN\n    \n    expression : LPAREN expression RPAREN\n                | expression operator expression\n                | unary expression\n                | expression unary\n                | operand\n    \n    operator : operator_calc\n             | operator_boolean\n             | operator_bit\n             | operator_cond\n    \n    operator_calc : PLUS\n                  | MINUS\n                  | MULTI\n                  | DIVIDE\n                  | EQUAL\n                  | PLUSEQU\n                  | MINUSEQU\n                  | MULTIEQU\n                  | DIVIDEQU\n    \n    operator_boolean : AND\n                     | OR\n                     | NOT\n    \n    operator_bit : BAND\n                 | BOR\n                 | BANDEQU\n                 | BOREQU\n                 | INV\n    \n    operator_cond : CEQ\n                  | CNEQ\n                  | CGT\n                  | CLT\n                  | CGE\n                  | CLE\n    \n    operand : IDENTIFIER\n            | variable\n            | IDENTIFIER LSQUARE expression RSQUARE\n    \n    return : RETURN expression\n           | RETURN\n    \n    declaration : var_type IDENTIFIER\n                | var_type IDENTIFIER EQUAL expression\n                | var_type IDENTIFIER EQUAL LPAREN lambda RPAREN\n                | var_type IDENTIFIER LSQUARE NUMBER RSQUARE\n                | var_type IDENTIFIER LSQUARE NUMBER RSQUARE EQUAL expression\n                | ARRAY IDENTIFIER\n                | ARRAY IDENTIFIER EQUAL LBRACE RBRACE\n                | ARRAY IDENTIFIER EQUAL LBRACE aggregation RBRACE\n    \n    aggregation : variable\n                | variable COMMA aggregation\n    \n    unary : NOT\n          | INV\n          | PLUSELF\n          | MINUSELF\n    \n    variable : NUMBER\n             | MINUS NUMBER\n             | DECIMAL\n             | MINUS DECIMAL\n             | CHARACTER\n             | STRING\n             | TRUE\n             | FALSE\n             | func_call\n    \n    func_call : IDENTIFIER LPAREN args RPAREN\n              | IDENTIFIER LPAREN RPAREN\n    \n    args : expression\n         | expression COMMA args\n    \n    lambda_call : LPAREN lambda RPAREN LPAREN RPAREN\n                | LPAREN lambda RPAREN LPAREN args RPAREN\n    \n    lambda : LPAREN RPAREN GOTO block\n           | LPAREN params RPAREN GOTO block\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,14,23,28,72,73,],[-3,0,-1,-2,-4,-5,-7,-6,-21,-22,]),'VOID':([0,4,23,28,72,73,],[6,6,-7,-6,-21,-22,]),'ARRAY':([0,4,16,23,24,25,28,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,113,120,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[7,7,21,-7,49,21,-6,49,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,21,49,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'INT':([0,4,16,23,24,25,28,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,113,120,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[9,9,9,-7,9,9,-6,9,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,9,9,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'DOUBLE':([0,4,16,23,24,25,28,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,113,120,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[10,10,10,-7,10,10,-6,10,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,10,10,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'FLOAT':([0,4,16,23,24,25,28,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,113,120,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[11,11,11,-7,11,11,-6,11,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,11,11,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'CHAR':([0,4,16,23,24,25,28,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,113,120,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[12,12,12,-7,12,12,-6,12,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,12,12,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'BOOL':([0,4,16,23,24,25,28,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,113,120,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[13,13,13,-7,13,13,-6,13,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,13,13,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'IDENTIFIER':([5,6,7,8,9,10,11,12,13,20,21,24,31,38,39,40,41,42,43,44,45,47,49,50,52,58,59,60,61,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,150,154,157,158,159,160,161,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[15,-8,-9,-10,-11,-12,-13,-14,-15,26,27,46,46,-31,-32,-33,-34,-35,-36,-37,110,46,116,46,46,-109,-110,-111,-112,-21,-22,-25,-26,-27,46,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,46,46,46,46,141,46,46,46,46,46,46,46,173,46,180,181,46,-60,-3,46,173,46,-61,-44,-45,-46,-3,46,-58,-59,-47,-49,-38,46,-50,-48,]),'LPAREN':([15,24,31,38,39,40,41,42,43,44,46,47,50,52,53,54,56,57,58,59,60,61,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,137,141,146,150,154,157,159,163,173,182,184,187,192,195,196,197,198,199,206,212,213,214,215,216,217,222,225,229,],[16,47,47,-31,-32,-33,-34,-35,-36,-37,112,113,118,118,120,121,123,124,-109,-110,-111,-112,-21,-22,-25,-26,-27,118,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,118,118,118,118,118,118,118,118,150,157,112,163,113,118,118,118,118,112,-60,-3,118,118,-61,-44,-45,-46,-3,118,-58,-59,-47,-49,222,-38,118,-50,-48,]),'RPAREN':([16,17,19,26,27,46,48,51,60,61,62,64,65,66,67,68,69,70,72,73,79,84,85,112,113,114,115,117,125,126,127,128,132,133,134,136,138,145,147,148,152,153,157,166,168,169,172,180,181,183,188,192,209,210,211,226,],[18,22,-16,-18,-20,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-17,-21,-22,-65,-109,-110,133,135,137,138,-64,-114,-116,-19,-63,153,-123,-124,156,-62,162,164,165,-96,-122,171,186,-125,-128,189,193,194,195,-129,-3,221,-56,-57,228,]),'LBRACE':([18,22,55,139,155,162,164,165,170,193,194,200,219,221,224,228,],[24,24,24,158,24,24,24,185,24,24,24,24,24,24,24,24,]),'COMMA':([19,26,27,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,117,125,126,127,128,133,134,138,152,153,176,],[25,-18,-20,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,-64,-114,-116,-19,-63,-123,154,-62,-96,-122,191,]),'RBRACE':([24,29,30,31,38,39,40,41,42,43,44,48,64,65,66,67,68,69,72,73,74,75,76,77,107,108,109,125,126,133,153,158,175,176,182,184,185,195,196,197,198,199,201,202,203,204,208,212,213,214,215,217,218,223,225,227,229,],[-3,72,73,-23,-31,-32,-33,-34,-35,-36,-37,-113,-115,-117,-118,-119,-120,-121,-21,-22,-24,-25,-26,-27,-28,-29,-30,-114,-116,-123,-122,174,190,-107,-60,-3,-3,-61,-44,-45,-46,-3,217,-39,-40,-3,-108,-58,-59,-47,-49,-38,-41,-43,-50,-42,-48,]),'BREAK':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[36,36,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'CONTINUE':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[37,37,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'RETURN':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[52,52,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'FOR':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[53,53,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'WHILE':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,122,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[54,54,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,146,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'DO':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[55,55,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'IF':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,200,212,213,214,215,217,225,229,],[56,56,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,216,-58,-59,-47,-49,-38,-50,-48,]),'SWITCH':([24,31,38,39,40,41,42,43,44,72,73,75,76,77,107,108,109,182,184,195,196,197,198,199,212,213,214,215,217,225,229,],[57,57,-31,-32,-33,-34,-35,-36,-37,-21,-22,-25,-26,-27,-28,-29,-30,-60,-3,-61,-44,-45,-46,-3,-58,-59,-47,-49,-38,-50,-48,]),'NOT':([24,31,34,38,39,40,41,42,43,44,46,47,48,50,51,52,58,59,60,61,62,64,65,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,117,118,119,120,121,123,124,125,126,128,129,131,133,134,138,141,144,145,147,148,149,150,152,153,154,157,159,163,179,182,183,184,187,192,195,196,197,198,199,206,207,211,212,213,214,215,217,220,222,225,226,229,],[58,58,84,-31,-32,-33,-34,-35,-36,-37,-94,58,-113,58,-66,58,-109,-110,-111,-112,-95,-115,-117,-118,-119,-120,-121,-21,-22,-25,-26,-27,58,-65,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,58,58,58,84,84,58,84,58,58,58,58,-114,-116,84,58,84,-123,84,-62,-94,84,84,84,84,84,58,-96,-122,58,58,58,58,84,-60,84,-3,58,58,-61,-44,-45,-46,-3,58,84,84,-58,-59,-47,-49,-38,84,58,-50,84,-48,]),'INV':([24,31,34,38,39,40,41,42,43,44,46,47,48,50,51,52,58,59,60,61,62,64,65,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,117,118,119,120,121,123,124,125,126,128,129,131,133,134,138,141,144,145,147,148,149,150,152,153,154,157,159,163,179,182,183,184,187,192,195,196,197,198,199,206,207,211,212,213,214,215,217,220,222,225,226,229,],[59,59,85,-31,-32,-33,-34,-35,-36,-37,-94,59,-113,59,-66,59,-109,-110,-111,-112,-95,-115,-117,-118,-119,-120,-121,-21,-22,-25,-26,-27,59,-65,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,59,59,59,85,85,59,85,59,59,59,59,-114,-116,85,59,85,-123,85,-62,-94,85,85,85,85,85,59,-96,-122,59,59,59,59,85,-60,85,-3,59,59,-61,-44,-45,-46,-3,59,85,85,-58,-59,-47,-49,-38,85,59,-50,85,-48,]),'PLUSELF':([24,31,34,38,39,40,41,42,43,44,46,47,48,50,51,52,58,59,60,61,62,64,65,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,117,118,119,120,121,123,124,125,126,128,129,131,133,134,138,141,144,145,147,148,149,150,152,153,154,157,159,163,179,182,183,184,187,192,195,196,197,198,199,206,207,211,212,213,214,215,217,220,222,225,226,229,],[60,60,60,-31,-32,-33,-34,-35,-36,-37,-94,60,-113,60,-66,60,-109,-110,-111,-112,-95,-115,-117,-118,-119,-120,-121,-21,-22,-25,-26,-27,60,-65,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,60,60,60,60,60,60,60,60,60,60,60,-114,-116,60,60,60,-123,60,-62,-94,60,60,60,60,60,60,-96,-122,60,60,60,60,60,-60,60,-3,60,60,-61,-44,-45,-46,-3,60,60,60,-58,-59,-47,-49,-38,60,60,-50,60,-48,]),'MINUSELF':([24,31,34,38,39,40,41,42,43,44,46,47,48,50,51,52,58,59,60,61,62,64,65,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,117,118,119,120,121,123,124,125,126,128,129,131,133,134,138,141,144,145,147,148,149,150,152,153,154,157,159,163,179,182,183,184,187,192,195,196,197,198,199,206,207,211,212,213,214,215,217,220,222,225,226,229,],[61,61,61,-31,-32,-33,-34,-35,-36,-37,-94,61,-113,61,-66,61,-109,-110,-111,-112,-95,-115,-117,-118,-119,-120,-121,-21,-22,-25,-26,-27,61,-65,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,61,61,61,61,61,61,61,61,61,61,61,-114,-116,61,61,61,-123,61,-62,-94,61,61,61,61,61,61,-96,-122,61,61,61,61,61,-60,61,-3,61,61,-61,-44,-45,-46,-3,61,61,61,-58,-59,-47,-49,-38,61,61,-50,61,-48,]),'NUMBER':([24,31,38,39,40,41,42,43,44,47,50,52,58,59,60,61,63,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,130,150,154,157,158,159,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[48,48,-31,-32,-33,-34,-35,-36,-37,48,48,48,-109,-110,-111,-112,125,-21,-22,-25,-26,-27,48,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,48,48,48,48,48,48,48,48,48,151,48,48,48,48,48,48,-60,-3,48,48,48,-61,-44,-45,-46,-3,48,-58,-59,-47,-49,-38,48,-50,-48,]),'MINUS':([24,31,34,38,39,40,41,42,43,44,46,47,48,50,51,52,58,59,60,61,62,64,65,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,117,118,119,120,121,123,124,125,126,128,129,131,133,134,138,141,144,145,147,148,149,150,152,153,154,157,158,159,163,179,182,183,184,187,191,192,195,196,197,198,199,206,207,211,212,213,214,215,217,220,222,225,226,229,],[63,63,87,-31,-32,-33,-34,-35,-36,-37,-94,63,-113,63,-66,63,-109,-110,-111,-112,-95,-115,-117,-118,-119,-120,-121,-21,-22,-25,-26,-27,63,-65,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,63,63,63,87,87,63,87,63,63,63,63,-114,-116,87,63,87,-123,87,-62,-94,87,87,87,87,87,63,-96,-122,63,63,63,63,63,87,-60,87,-3,63,63,63,-61,-44,-45,-46,-3,63,87,87,-58,-59,-47,-49,-38,87,63,-50,87,-48,]),'DECIMAL':([24,31,38,39,40,41,42,43,44,47,50,52,58,59,60,61,63,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[64,64,-31,-32,-33,-34,-35,-36,-37,64,64,64,-109,-110,-111,-112,126,-21,-22,-25,-26,-27,64,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-60,-3,64,64,64,-61,-44,-45,-46,-3,64,-58,-59,-47,-49,-38,64,-50,-48,]),'CHARACTER':([24,31,38,39,40,41,42,43,44,47,50,52,58,59,60,61,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[65,65,-31,-32,-33,-34,-35,-36,-37,65,65,65,-109,-110,-111,-112,-21,-22,-25,-26,-27,65,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-60,-3,65,65,65,-61,-44,-45,-46,-3,65,-58,-59,-47,-49,-38,65,-50,-48,]),'STRING':([24,31,38,39,40,41,42,43,44,47,50,52,58,59,60,61,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[66,66,-31,-32,-33,-34,-35,-36,-37,66,66,66,-109,-110,-111,-112,-21,-22,-25,-26,-27,66,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-60,-3,66,66,66,-61,-44,-45,-46,-3,66,-58,-59,-47,-49,-38,66,-50,-48,]),'TRUE':([24,31,38,39,40,41,42,43,44,47,50,52,58,59,60,61,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[67,67,-31,-32,-33,-34,-35,-36,-37,67,67,67,-109,-110,-111,-112,-21,-22,-25,-26,-27,67,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-60,-3,67,67,67,-61,-44,-45,-46,-3,67,-58,-59,-47,-49,-38,67,-50,-48,]),'FALSE':([24,31,38,39,40,41,42,43,44,47,50,52,58,59,60,61,72,73,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,182,184,187,191,192,195,196,197,198,199,206,212,213,214,215,217,222,225,229,],[68,68,-31,-32,-33,-34,-35,-36,-37,68,68,68,-109,-110,-111,-112,-21,-22,-25,-26,-27,68,-67,-68,-69,-70,-82,-87,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-83,-84,-85,-86,-88,-89,-90,-91,-92,-93,-28,-29,-30,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-60,-3,68,68,68,-61,-44,-45,-46,-3,68,-58,-59,-47,-49,-38,68,-50,-48,]),'LSQUARE':([26,46,110,141,],[71,111,130,111,]),'SEMICOLON':([32,33,34,35,36,37,46,48,51,52,60,61,62,64,65,66,67,68,69,79,84,85,110,116,117,119,120,125,126,128,133,138,140,141,142,143,144,149,152,153,159,167,171,174,177,178,179,186,189,190,207,],[75,76,77,107,108,109,-94,-113,-66,-98,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,-99,-104,-64,-97,-3,-114,-116,-63,-123,-62,159,-94,-51,-52,-53,-100,-96,-122,-3,-102,-126,-105,192,-54,-55,-101,-127,-106,-103,]),'PLUS':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[86,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,86,86,86,-114,-116,86,86,-123,86,-62,-94,86,86,86,86,86,-96,-122,86,86,86,86,86,86,]),'MULTI':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[88,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,88,88,88,-114,-116,88,88,-123,88,-62,-94,88,88,88,88,88,-96,-122,88,88,88,88,88,88,]),'DIVIDE':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[89,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,89,89,89,-114,-116,89,89,-123,89,-62,-94,89,89,89,89,89,-96,-122,89,89,89,89,89,89,]),'EQUAL':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,110,115,116,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,167,179,183,207,211,220,226,],[90,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,129,90,139,90,90,-114,-116,90,90,-123,90,-62,-94,90,90,90,90,90,-96,-122,187,90,90,90,90,90,90,]),'PLUSEQU':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[91,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,91,91,91,-114,-116,91,91,-123,91,-62,-94,91,91,91,91,91,-96,-122,91,91,91,91,91,91,]),'MINUSEQU':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[92,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,92,92,92,-114,-116,92,92,-123,92,-62,-94,92,92,92,92,92,-96,-122,92,92,92,92,92,92,]),'MULTIEQU':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[93,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,93,93,93,-114,-116,93,93,-123,93,-62,-94,93,93,93,93,93,-96,-122,93,93,93,93,93,93,]),'DIVIDEQU':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[94,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,94,94,94,-114,-116,94,94,-123,94,-62,-94,94,94,94,94,94,-96,-122,94,94,94,94,94,94,]),'AND':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[95,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,95,95,95,-114,-116,95,95,-123,95,-62,-94,95,95,95,95,95,-96,-122,95,95,95,95,95,95,]),'OR':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[96,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,96,96,96,-114,-116,96,96,-123,96,-62,-94,96,96,96,96,96,-96,-122,96,96,96,96,96,96,]),'BAND':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[97,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,97,97,97,-114,-116,97,97,-123,97,-62,-94,97,97,97,97,97,-96,-122,97,97,97,97,97,97,]),'BOR':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[98,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,98,98,98,-114,-116,98,98,-123,98,-62,-94,98,98,98,98,98,-96,-122,98,98,98,98,98,98,]),'BANDEQU':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[99,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,99,99,99,-114,-116,99,99,-123,99,-62,-94,99,99,99,99,99,-96,-122,99,99,99,99,99,99,]),'BOREQU':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[100,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,100,100,100,-114,-116,100,100,-123,100,-62,-94,100,100,100,100,100,-96,-122,100,100,100,100,100,100,]),'CEQ':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[101,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,101,101,101,-114,-116,101,101,-123,101,-62,-94,101,101,101,101,101,-96,-122,101,101,101,101,101,101,]),'CNEQ':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[102,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,102,102,102,-114,-116,102,102,-123,102,-62,-94,102,102,102,102,102,-96,-122,102,102,102,102,102,102,]),'CGT':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[103,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,103,103,103,-114,-116,103,103,-123,103,-62,-94,103,103,103,103,103,-96,-122,103,103,103,103,103,103,]),'CLT':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[104,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,104,104,104,-114,-116,104,104,-123,104,-62,-94,104,104,104,104,104,-96,-122,104,104,104,104,104,104,]),'CGE':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[105,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,105,105,105,-114,-116,105,105,-123,105,-62,-94,105,105,105,105,105,-96,-122,105,105,105,105,105,105,]),'CLE':([34,46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,115,117,119,125,126,128,131,133,134,138,141,144,145,147,148,149,152,153,179,183,207,211,220,226,],[106,-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,106,106,106,-114,-116,106,106,-123,106,-62,-94,106,106,106,106,106,-96,-122,106,106,106,106,106,106,]),'RSQUARE':([46,48,51,60,61,62,64,65,66,67,68,69,71,79,84,85,117,125,126,128,131,133,138,151,152,153,],[-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,127,-65,-109,-110,-64,-114,-116,-63,152,-123,-62,167,-96,-122,]),'COLON':([46,48,51,60,61,62,64,65,66,67,68,69,79,84,85,117,125,126,128,133,138,152,153,205,220,],[-94,-113,-66,-111,-112,-95,-115,-117,-118,-119,-120,-121,-65,-109,-110,-64,-114,-116,-63,-123,-62,-96,-122,219,224,]),'ELSE':([72,73,184,199,229,],[-21,-22,200,200,-48,]),'DEFAULT':([72,73,185,204,227,],[-21,-22,205,205,-42,]),'CASE':([72,73,185,204,227,],[-21,-22,206,206,-42,]),'GOTO':([135,156,],[155,170,]),'IN':([141,],[160,]),'OF':([141,],[161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,4,],[2,14,]),'e':([0,24,120,159,184,185,192,199,204,],[3,29,142,178,197,202,210,197,202,]),'function':([0,4,],[4,4,]),'func_ret':([0,4,],[5,5,]),'var_type':([0,4,16,24,25,31,113,120,],[8,8,20,45,20,45,20,45,]),'params':([16,25,113,],[17,70,136,]),'param':([16,25,113,],[19,19,19,]),'block':([18,22,55,155,162,164,170,193,194,200,219,221,224,228,],[23,28,122,169,182,184,188,212,213,215,223,225,227,229,]),'statements':([24,31,],[30,74,]),'statement':([24,31,],[31,31,]),'declaration':([24,31,120,],[32,32,143,]),'lambda_call':([24,31,],[33,33,]),'expression':([24,31,47,50,52,78,111,112,113,118,120,121,123,124,129,150,154,157,159,163,187,192,206,222,],[34,34,115,117,119,128,131,134,115,115,144,145,147,148,149,115,134,134,179,183,207,211,220,226,]),'return':([24,31,],[35,35,]),'for_block':([24,31,],[38,38,]),'while_block':([24,31,],[39,39,]),'do_while_block':([24,31,],[40,40,]),'if_block':([24,31,],[41,41,]),'switch_block':([24,31,],[42,42,]),'for_in_block':([24,31,],[43,43,]),'for_of_block':([24,31,],[44,44,]),'unary':([24,31,34,47,50,52,78,111,112,113,115,117,118,119,120,121,123,124,128,129,131,134,144,145,147,148,149,150,154,157,159,163,179,183,187,192,206,207,211,220,222,226,],[50,50,79,50,50,50,50,50,50,50,79,79,50,79,50,50,50,50,79,50,79,79,79,79,79,79,79,50,50,50,50,50,79,79,50,50,50,79,79,79,50,79,]),'operand':([24,31,47,50,52,78,111,112,113,118,120,121,123,124,129,150,154,157,159,163,187,192,206,222,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'variable':([24,31,47,50,52,78,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,187,191,192,206,222,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,176,62,62,62,176,62,62,62,]),'func_call':([24,31,47,50,52,78,111,112,113,118,120,121,123,124,129,150,154,157,158,159,163,187,191,192,206,222,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'operator':([34,115,117,119,128,131,134,144,145,147,148,149,179,183,207,211,220,226,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'operator_calc':([34,115,117,119,128,131,134,144,145,147,148,149,179,183,207,211,220,226,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'operator_boolean':([34,115,117,119,128,131,134,144,145,147,148,149,179,183,207,211,220,226,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'operator_bit':([34,115,117,119,128,131,134,144,145,147,148,149,179,183,207,211,220,226,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'operator_cond':([34,115,117,119,128,131,134,144,145,147,148,149,179,183,207,211,220,226,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'lambda':([47,150,],[114,166,]),'args':([112,154,157,],[132,168,172,]),'for_init':([120,],[140,]),'aggregation':([158,191,],[175,208,]),'for_cond':([159,],[177,]),'elif_blocks':([184,199,],[196,214,]),'else_block':([184,199,],[198,198,]),'elif_block':([184,199,],[199,199,]),'case_blocks':([185,204,],[201,218,]),'default_block':([185,204,],[203,203,]),'case_block':([185,204,],[204,204,]),'for_update':([192,],[209,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions','program',1,'p_program','yacc.py',21),
  ('program -> e','program',1,'p_program','yacc.py',22),
  ('e -> <empty>','e',0,'p_e','yacc.py',28),
  ('functions -> function','functions',1,'p_functions','yacc.py',34),
  ('functions -> function functions','functions',2,'p_functions','yacc.py',35),
  ('function -> func_ret IDENTIFIER LPAREN params RPAREN block','function',6,'p_function','yacc.py',41),
  ('function -> func_ret IDENTIFIER LPAREN RPAREN block','function',5,'p_function','yacc.py',42),
  ('func_ret -> VOID','func_ret',1,'p_func_ret','yacc.py',48),
  ('func_ret -> ARRAY','func_ret',1,'p_func_ret','yacc.py',49),
  ('func_ret -> var_type','func_ret',1,'p_func_ret','yacc.py',50),
  ('var_type -> INT','var_type',1,'p_var_type','yacc.py',56),
  ('var_type -> DOUBLE','var_type',1,'p_var_type','yacc.py',57),
  ('var_type -> FLOAT','var_type',1,'p_var_type','yacc.py',58),
  ('var_type -> CHAR','var_type',1,'p_var_type','yacc.py',59),
  ('var_type -> BOOL','var_type',1,'p_var_type','yacc.py',60),
  ('params -> param','params',1,'p_params','yacc.py',66),
  ('params -> param COMMA params','params',3,'p_params','yacc.py',67),
  ('param -> var_type IDENTIFIER','param',2,'p_param','yacc.py',73),
  ('param -> var_type IDENTIFIER LSQUARE RSQUARE','param',4,'p_param','yacc.py',74),
  ('param -> ARRAY IDENTIFIER','param',2,'p_param','yacc.py',75),
  ('block -> LBRACE e RBRACE','block',3,'p_block','yacc.py',81),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','yacc.py',82),
  ('statements -> statement','statements',1,'p_statements','yacc.py',88),
  ('statements -> statement statements','statements',2,'p_statements','yacc.py',89),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','yacc.py',95),
  ('statement -> lambda_call SEMICOLON','statement',2,'p_statement','yacc.py',96),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','yacc.py',97),
  ('statement -> return SEMICOLON','statement',2,'p_statement','yacc.py',98),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','yacc.py',99),
  ('statement -> CONTINUE SEMICOLON','statement',2,'p_statement','yacc.py',100),
  ('statement -> for_block','statement',1,'p_statement','yacc.py',101),
  ('statement -> while_block','statement',1,'p_statement','yacc.py',102),
  ('statement -> do_while_block','statement',1,'p_statement','yacc.py',103),
  ('statement -> if_block','statement',1,'p_statement','yacc.py',104),
  ('statement -> switch_block','statement',1,'p_statement','yacc.py',105),
  ('statement -> for_in_block','statement',1,'p_statement','yacc.py',106),
  ('statement -> for_of_block','statement',1,'p_statement','yacc.py',107),
  ('switch_block -> SWITCH LPAREN expression RPAREN LBRACE case_blocks RBRACE','switch_block',7,'p_switch_block','yacc.py',113),
  ('case_blocks -> e','case_blocks',1,'p_case_blocks','yacc.py',119),
  ('case_blocks -> default_block','case_blocks',1,'p_case_blocks','yacc.py',120),
  ('case_blocks -> case_block case_blocks','case_blocks',2,'p_case_blocks','yacc.py',121),
  ('case_block -> CASE expression COLON block','case_block',4,'p_case_block','yacc.py',127),
  ('default_block -> DEFAULT COLON block','default_block',3,'p_default_block','yacc.py',133),
  ('if_block -> IF LPAREN expression RPAREN block elif_blocks','if_block',6,'p_if_block','yacc.py',139),
  ('elif_blocks -> e','elif_blocks',1,'p_elif_blocks','yacc.py',145),
  ('elif_blocks -> else_block','elif_blocks',1,'p_elif_blocks','yacc.py',146),
  ('elif_blocks -> elif_block elif_blocks','elif_blocks',2,'p_elif_blocks','yacc.py',147),
  ('elif_block -> ELSE IF LPAREN expression RPAREN block','elif_block',6,'p_elif_block','yacc.py',153),
  ('else_block -> ELSE block','else_block',2,'p_else_block','yacc.py',159),
  ('for_block -> FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_update RPAREN block','for_block',9,'p_for_block','yacc.py',165),
  ('for_init -> e','for_init',1,'p_for_init','yacc.py',171),
  ('for_init -> declaration','for_init',1,'p_for_init','yacc.py',172),
  ('for_init -> expression','for_init',1,'p_for_init','yacc.py',173),
  ('for_cond -> e','for_cond',1,'p_for_cond','yacc.py',179),
  ('for_cond -> expression','for_cond',1,'p_for_cond','yacc.py',180),
  ('for_update -> e','for_update',1,'p_for_update','yacc.py',186),
  ('for_update -> expression','for_update',1,'p_for_update','yacc.py',187),
  ('for_in_block -> FOR LPAREN IDENTIFIER IN IDENTIFIER RPAREN block','for_in_block',7,'p_for_in_block','yacc.py',193),
  ('for_of_block -> FOR LPAREN IDENTIFIER OF IDENTIFIER RPAREN block','for_of_block',7,'p_for_of_block','yacc.py',199),
  ('while_block -> WHILE LPAREN expression RPAREN block','while_block',5,'p_while_block','yacc.py',205),
  ('do_while_block -> DO block WHILE LPAREN expression RPAREN','do_while_block',6,'p_do_while_block','yacc.py',211),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','yacc.py',217),
  ('expression -> expression operator expression','expression',3,'p_expression','yacc.py',218),
  ('expression -> unary expression','expression',2,'p_expression','yacc.py',219),
  ('expression -> expression unary','expression',2,'p_expression','yacc.py',220),
  ('expression -> operand','expression',1,'p_expression','yacc.py',221),
  ('operator -> operator_calc','operator',1,'p_operator','yacc.py',227),
  ('operator -> operator_boolean','operator',1,'p_operator','yacc.py',228),
  ('operator -> operator_bit','operator',1,'p_operator','yacc.py',229),
  ('operator -> operator_cond','operator',1,'p_operator','yacc.py',230),
  ('operator_calc -> PLUS','operator_calc',1,'p_operator_calc','yacc.py',236),
  ('operator_calc -> MINUS','operator_calc',1,'p_operator_calc','yacc.py',237),
  ('operator_calc -> MULTI','operator_calc',1,'p_operator_calc','yacc.py',238),
  ('operator_calc -> DIVIDE','operator_calc',1,'p_operator_calc','yacc.py',239),
  ('operator_calc -> EQUAL','operator_calc',1,'p_operator_calc','yacc.py',240),
  ('operator_calc -> PLUSEQU','operator_calc',1,'p_operator_calc','yacc.py',241),
  ('operator_calc -> MINUSEQU','operator_calc',1,'p_operator_calc','yacc.py',242),
  ('operator_calc -> MULTIEQU','operator_calc',1,'p_operator_calc','yacc.py',243),
  ('operator_calc -> DIVIDEQU','operator_calc',1,'p_operator_calc','yacc.py',244),
  ('operator_boolean -> AND','operator_boolean',1,'p_operator_boolean','yacc.py',250),
  ('operator_boolean -> OR','operator_boolean',1,'p_operator_boolean','yacc.py',251),
  ('operator_boolean -> NOT','operator_boolean',1,'p_operator_boolean','yacc.py',252),
  ('operator_bit -> BAND','operator_bit',1,'p_operator_bit','yacc.py',258),
  ('operator_bit -> BOR','operator_bit',1,'p_operator_bit','yacc.py',259),
  ('operator_bit -> BANDEQU','operator_bit',1,'p_operator_bit','yacc.py',260),
  ('operator_bit -> BOREQU','operator_bit',1,'p_operator_bit','yacc.py',261),
  ('operator_bit -> INV','operator_bit',1,'p_operator_bit','yacc.py',262),
  ('operator_cond -> CEQ','operator_cond',1,'p_operator_cond','yacc.py',268),
  ('operator_cond -> CNEQ','operator_cond',1,'p_operator_cond','yacc.py',269),
  ('operator_cond -> CGT','operator_cond',1,'p_operator_cond','yacc.py',270),
  ('operator_cond -> CLT','operator_cond',1,'p_operator_cond','yacc.py',271),
  ('operator_cond -> CGE','operator_cond',1,'p_operator_cond','yacc.py',272),
  ('operator_cond -> CLE','operator_cond',1,'p_operator_cond','yacc.py',273),
  ('operand -> IDENTIFIER','operand',1,'p_operand','yacc.py',279),
  ('operand -> variable','operand',1,'p_operand','yacc.py',280),
  ('operand -> IDENTIFIER LSQUARE expression RSQUARE','operand',4,'p_operand','yacc.py',281),
  ('return -> RETURN expression','return',2,'p_return','yacc.py',287),
  ('return -> RETURN','return',1,'p_return','yacc.py',288),
  ('declaration -> var_type IDENTIFIER','declaration',2,'p_declaration','yacc.py',294),
  ('declaration -> var_type IDENTIFIER EQUAL expression','declaration',4,'p_declaration','yacc.py',295),
  ('declaration -> var_type IDENTIFIER EQUAL LPAREN lambda RPAREN','declaration',6,'p_declaration','yacc.py',296),
  ('declaration -> var_type IDENTIFIER LSQUARE NUMBER RSQUARE','declaration',5,'p_declaration','yacc.py',297),
  ('declaration -> var_type IDENTIFIER LSQUARE NUMBER RSQUARE EQUAL expression','declaration',7,'p_declaration','yacc.py',298),
  ('declaration -> ARRAY IDENTIFIER','declaration',2,'p_declaration','yacc.py',299),
  ('declaration -> ARRAY IDENTIFIER EQUAL LBRACE RBRACE','declaration',5,'p_declaration','yacc.py',300),
  ('declaration -> ARRAY IDENTIFIER EQUAL LBRACE aggregation RBRACE','declaration',6,'p_declaration','yacc.py',301),
  ('aggregation -> variable','aggregation',1,'p_aggregation','yacc.py',307),
  ('aggregation -> variable COMMA aggregation','aggregation',3,'p_aggregation','yacc.py',308),
  ('unary -> NOT','unary',1,'p_unary','yacc.py',314),
  ('unary -> INV','unary',1,'p_unary','yacc.py',315),
  ('unary -> PLUSELF','unary',1,'p_unary','yacc.py',316),
  ('unary -> MINUSELF','unary',1,'p_unary','yacc.py',317),
  ('variable -> NUMBER','variable',1,'p_variable','yacc.py',323),
  ('variable -> MINUS NUMBER','variable',2,'p_variable','yacc.py',324),
  ('variable -> DECIMAL','variable',1,'p_variable','yacc.py',325),
  ('variable -> MINUS DECIMAL','variable',2,'p_variable','yacc.py',326),
  ('variable -> CHARACTER','variable',1,'p_variable','yacc.py',327),
  ('variable -> STRING','variable',1,'p_variable','yacc.py',328),
  ('variable -> TRUE','variable',1,'p_variable','yacc.py',329),
  ('variable -> FALSE','variable',1,'p_variable','yacc.py',330),
  ('variable -> func_call','variable',1,'p_variable','yacc.py',331),
  ('func_call -> IDENTIFIER LPAREN args RPAREN','func_call',4,'p_func_call','yacc.py',337),
  ('func_call -> IDENTIFIER LPAREN RPAREN','func_call',3,'p_func_call','yacc.py',338),
  ('args -> expression','args',1,'p_args','yacc.py',344),
  ('args -> expression COMMA args','args',3,'p_args','yacc.py',345),
  ('lambda_call -> LPAREN lambda RPAREN LPAREN RPAREN','lambda_call',5,'p_lambda_call','yacc.py',351),
  ('lambda_call -> LPAREN lambda RPAREN LPAREN args RPAREN','lambda_call',6,'p_lambda_call','yacc.py',352),
  ('lambda -> LPAREN RPAREN GOTO block','lambda',4,'p_lambda','yacc.py',358),
  ('lambda -> LPAREN params RPAREN GOTO block','lambda',5,'p_lambda','yacc.py',359),
]
