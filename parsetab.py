
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AUTO BAND BANDEQU BOOL BOR BOREQU BREAK CASE CEQ CGE CGT CHAR CHARACTER CLE CLT CNEQ COLON COMMA COMMETBLOCK COMMETLINE CONTINUE DECIMAL DEFAULT DIVIDE DIVIDEQU DO DOUBLE ELSE EQUAL FALSE FLOAT FOR IDENTIFIER IF INCLUDE INT INV LBRACE LPAREN LSQUARE MINUS MINUSELF MINUSEQU MULTI MULTIEQU NOT NUMBER OR PLUS PLUSELF PLUSEQU RBRACE RETURN RPAREN RSQUARE SEMICOLON STRING SWITCH TRUE VOID WHILE\n    program : functions\n            | e\n    \n    e :\n    \n    functions : function\n              | function functions\n    \n    function : func_ret IDENTIFIER LPAREN params RPAREN block\n             | func_ret IDENTIFIER LPAREN RPAREN block\n    \n    func_ret : VOID\n             | ARRAY\n             | var_type\n    \n    var_type : INT\n             | DOUBLE\n             | FLOAT\n             | CHAR\n             | BOOL\n    \n    params : param\n           | param COMMA params\n    \n    param : var_type IDENTIFIER\n          | var_type IDENTIFIER LSQUARE RSQUARE\n          | ARRAY IDENTIFIER\n    \n    block : LBRACE e RBRACE\n          | LBRACE statements RBRACE\n    \n    statements : statement\n               | statement statements\n    \n    statement : declaration SEMICOLON\n              | expression SEMICOLON\n              | return SEMICOLON\n              | BREAK SEMICOLON\n              | CONTINUE SEMICOLON\n              | for_block\n              | while_block\n              | do_while_block\n              | if_block\n              | switch_block\n    \n    switch_block : SWITCH LPAREN expression RPAREN LBRACE case_blocks RBRACE\n    \n    case_blocks : e\n                | default_block\n                | case_block case_blocks\n    \n    case_block : CASE expression COLON block\n    \n    default_block : DEFAULT COLON block\n    \n    if_block : IF LPAREN expression RPAREN block elif_blocks\n    \n    elif_blocks : e\n                | else_block\n                | elif_block elif_blocks\n    \n    elif_block : ELSE IF LPAREN expression RPAREN block\n    \n    else_block : ELSE block\n    \n    for_block : FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_update RPAREN block\n    \n    for_init : e\n             | declaration\n             | expression\n    \n    for_cond : e\n             | expression\n    \n    for_update : e\n               | expression\n    \n    while_block : WHILE LPAREN expression RPAREN block\n    \n    do_while_block : DO block WHILE LPAREN expression RPAREN\n    \n    expression : LPAREN expression RPAREN\n                | expression operator expression\n                | unary expression\n                | expression unary\n                | operand\n    \n    operator : operator_calc\n             | operator_boolean\n             | operator_bit\n             | operator_cond\n    \n    operator_calc : PLUS\n                  | MINUS\n                  | MULTI\n                  | DIVIDE\n                  | EQUAL\n                  | PLUSEQU\n                  | MINUSEQU\n                  | MULTIEQU\n                  | DIVIDEQU\n    \n    operator_boolean : AND\n                     | OR\n                     | NOT\n    \n    operator_bit : BAND\n                 | BOR\n                 | BANDEQU\n                 | BOREQU\n                 | INV\n    \n    operator_cond : CEQ\n                  | CNEQ\n                  | CGT\n                  | CLT\n                  | CGE\n                  | CLE\n    \n    operand : IDENTIFIER\n            | variable\n            | IDENTIFIER LSQUARE expression RSQUARE\n    \n    return : RETURN expression\n           | RETURN\n    \n    declaration : var_type IDENTIFIER\n                | var_type IDENTIFIER EQUAL expression\n                | var_type IDENTIFIER LSQUARE NUMBER RSQUARE\n                | var_type IDENTIFIER LSQUARE NUMBER RSQUARE EQUAL expression\n                | ARRAY IDENTIFIER\n                | ARRAY IDENTIFIER EQUAL LBRACE RBRACE\n                | ARRAY IDENTIFIER EQUAL LBRACE aggregation RBRACE\n    \n    aggregation : variable\n                | variable COMMA aggregation\n    \n    unary : NOT\n          | INV\n          | PLUSELF\n          | MINUSELF\n    \n    variable : NUMBER\n             | MINUS NUMBER\n             | DECIMAL\n             | MINUS DECIMAL\n             | CHARACTER\n             | STRING\n             | TRUE\n             | FALSE\n             | func_call\n    \n    func_call : IDENTIFIER LPAREN args RPAREN\n              | IDENTIFIER LPAREN RPAREN\n    \n    args : expression\n         | expression COMMA args\n    '
    
_lr_action_items = {'$end':([0,1,2,3,4,14,23,28,69,70,],[-3,0,-1,-2,-4,-5,-7,-6,-21,-22,]),'VOID':([0,4,23,28,69,70,],[6,6,-7,-6,-21,-22,]),'ARRAY':([0,4,16,23,24,25,28,31,37,38,39,40,41,69,70,72,73,103,104,105,113,158,160,166,167,168,169,170,183,184,186,194,198,],[7,7,21,-7,45,21,-6,45,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,45,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'INT':([0,4,16,23,24,25,28,31,37,38,39,40,41,69,70,72,73,103,104,105,113,158,160,166,167,168,169,170,183,184,186,194,198,],[9,9,9,-7,9,9,-6,9,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,9,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'DOUBLE':([0,4,16,23,24,25,28,31,37,38,39,40,41,69,70,72,73,103,104,105,113,158,160,166,167,168,169,170,183,184,186,194,198,],[10,10,10,-7,10,10,-6,10,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,10,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'FLOAT':([0,4,16,23,24,25,28,31,37,38,39,40,41,69,70,72,73,103,104,105,113,158,160,166,167,168,169,170,183,184,186,194,198,],[11,11,11,-7,11,11,-6,11,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,11,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'CHAR':([0,4,16,23,24,25,28,31,37,38,39,40,41,69,70,72,73,103,104,105,113,158,160,166,167,168,169,170,183,184,186,194,198,],[12,12,12,-7,12,12,-6,12,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,12,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'BOOL':([0,4,16,23,24,25,28,31,37,38,39,40,41,69,70,72,73,103,104,105,113,158,160,166,167,168,169,170,183,184,186,194,198,],[13,13,13,-7,13,13,-6,13,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,13,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'IDENTIFIER':([5,6,7,8,9,10,11,12,13,20,21,24,31,37,38,39,40,41,42,45,46,47,49,55,56,57,58,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[15,-8,-9,-10,-11,-12,-13,-14,-15,26,27,43,43,-30,-31,-32,-33,-34,106,109,43,43,43,-103,-104,-105,-106,-21,-22,-25,-26,43,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,43,43,43,43,43,43,43,43,151,43,43,-55,-3,43,151,43,-56,-41,-42,-43,-3,43,-44,-46,-35,43,-47,-45,]),'LPAREN':([15,24,31,37,38,39,40,41,43,46,47,49,50,51,53,54,55,56,57,58,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,135,142,144,146,151,158,160,162,165,166,167,168,169,170,177,183,184,185,186,191,194,198,],[16,46,46,-30,-31,-32,-33,-34,108,46,46,46,113,114,116,117,-103,-104,-105,-106,-21,-22,-25,-26,46,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,46,46,46,46,46,46,46,146,46,46,46,108,-55,-3,46,46,-56,-41,-42,-43,-3,46,-44,-46,191,-35,46,-47,-45,]),'RPAREN':([16,17,19,26,27,43,44,48,57,58,59,61,62,63,64,65,66,67,75,80,81,108,110,111,118,119,120,121,125,126,127,129,134,136,137,140,141,150,159,165,180,181,182,195,],[18,22,-16,-18,-20,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-17,-60,-103,-104,126,129,-59,-108,-110,-19,-58,141,-117,-118,-57,145,147,148,-91,-116,-119,166,-3,190,-53,-54,197,]),'LBRACE':([18,22,52,128,145,147,148,171,188,190,193,197,],[24,24,24,143,24,24,161,24,24,24,24,24,]),'COMMA':([19,26,27,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,111,118,119,120,121,126,127,129,140,141,154,],[25,-18,-20,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,-59,-108,-110,-19,-58,-117,142,-57,-91,-116,164,]),'RBRACE':([24,29,30,31,37,38,39,40,41,44,61,62,63,64,65,66,69,70,71,72,73,103,104,105,118,119,126,141,143,153,154,158,160,161,166,167,168,169,170,172,173,174,175,179,183,184,186,187,192,194,196,198,],[-3,69,70,-23,-30,-31,-32,-33,-34,-107,-109,-111,-112,-113,-114,-115,-21,-22,-24,-25,-26,-27,-28,-29,-108,-110,-117,-116,152,163,-101,-55,-3,-3,-56,-41,-42,-43,-3,186,-36,-37,-3,-102,-44,-46,-35,-38,-40,-47,-39,-45,]),'BREAK':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,183,184,186,194,198,],[35,35,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'CONTINUE':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,183,184,186,194,198,],[36,36,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'RETURN':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,183,184,186,194,198,],[49,49,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'FOR':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,183,184,186,194,198,],[50,50,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'WHILE':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,115,158,160,166,167,168,169,170,183,184,186,194,198,],[51,51,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,135,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'DO':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,183,184,186,194,198,],[52,52,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'IF':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,171,183,184,186,194,198,],[53,53,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,185,-44,-46,-35,-47,-45,]),'SWITCH':([24,31,37,38,39,40,41,69,70,72,73,103,104,105,158,160,166,167,168,169,170,183,184,186,194,198,],[54,54,-30,-31,-32,-33,-34,-21,-22,-25,-26,-27,-28,-29,-55,-3,-56,-41,-42,-43,-3,-44,-46,-35,-47,-45,]),'NOT':([24,31,33,37,38,39,40,41,43,44,46,47,48,49,55,56,57,58,59,61,62,63,64,65,66,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,121,122,124,126,127,129,133,134,136,137,138,140,141,142,144,146,157,158,159,160,162,165,166,167,168,169,170,177,178,182,183,184,186,189,191,194,195,198,],[55,55,80,-30,-31,-32,-33,-34,-89,-107,55,55,-61,55,-103,-104,-105,-106,-90,-109,-111,-112,-113,-114,-115,-21,-22,-25,-26,55,-60,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,55,55,80,80,80,55,55,55,55,-108,-110,80,55,80,-117,80,-57,80,80,80,80,80,-91,-116,55,55,55,80,-55,80,-3,55,55,-56,-41,-42,-43,-3,55,80,80,-44,-46,-35,80,55,-47,80,-45,]),'INV':([24,31,33,37,38,39,40,41,43,44,46,47,48,49,55,56,57,58,59,61,62,63,64,65,66,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,121,122,124,126,127,129,133,134,136,137,138,140,141,142,144,146,157,158,159,160,162,165,166,167,168,169,170,177,178,182,183,184,186,189,191,194,195,198,],[56,56,81,-30,-31,-32,-33,-34,-89,-107,56,56,-61,56,-103,-104,-105,-106,-90,-109,-111,-112,-113,-114,-115,-21,-22,-25,-26,56,-60,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,56,56,81,81,81,56,56,56,56,-108,-110,81,56,81,-117,81,-57,81,81,81,81,81,-91,-116,56,56,56,81,-55,81,-3,56,56,-56,-41,-42,-43,-3,56,81,81,-44,-46,-35,81,56,-47,81,-45,]),'PLUSELF':([24,31,33,37,38,39,40,41,43,44,46,47,48,49,55,56,57,58,59,61,62,63,64,65,66,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,121,122,124,126,127,129,133,134,136,137,138,140,141,142,144,146,157,158,159,160,162,165,166,167,168,169,170,177,178,182,183,184,186,189,191,194,195,198,],[57,57,57,-30,-31,-32,-33,-34,-89,-107,57,57,-61,57,-103,-104,-105,-106,-90,-109,-111,-112,-113,-114,-115,-21,-22,-25,-26,57,-60,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,57,57,57,57,57,57,57,57,57,-108,-110,57,57,57,-117,57,-57,57,57,57,57,57,-91,-116,57,57,57,57,-55,57,-3,57,57,-56,-41,-42,-43,-3,57,57,57,-44,-46,-35,57,57,-47,57,-45,]),'MINUSELF':([24,31,33,37,38,39,40,41,43,44,46,47,48,49,55,56,57,58,59,61,62,63,64,65,66,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,121,122,124,126,127,129,133,134,136,137,138,140,141,142,144,146,157,158,159,160,162,165,166,167,168,169,170,177,178,182,183,184,186,189,191,194,195,198,],[58,58,58,-30,-31,-32,-33,-34,-89,-107,58,58,-61,58,-103,-104,-105,-106,-90,-109,-111,-112,-113,-114,-115,-21,-22,-25,-26,58,-60,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,58,58,58,58,58,58,58,58,58,-108,-110,58,58,58,-117,58,-57,58,58,58,58,58,-91,-116,58,58,58,58,-55,58,-3,58,58,-56,-41,-42,-43,-3,58,58,58,-44,-46,-35,58,58,-47,58,-45,]),'NUMBER':([24,31,37,38,39,40,41,46,47,49,55,56,57,58,60,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,123,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[44,44,-30,-31,-32,-33,-34,44,44,44,-103,-104,-105,-106,118,-21,-22,-25,-26,44,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,44,44,44,44,44,44,44,139,44,44,44,44,-55,-3,44,44,44,-56,-41,-42,-43,-3,44,-44,-46,-35,44,-47,-45,]),'MINUS':([24,31,33,37,38,39,40,41,43,44,46,47,48,49,55,56,57,58,59,61,62,63,64,65,66,69,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,111,112,113,114,116,117,118,119,121,122,124,126,127,129,133,134,136,137,138,140,141,142,143,144,146,157,158,159,160,162,164,165,166,167,168,169,170,177,178,182,183,184,186,189,191,194,195,198,],[60,60,83,-30,-31,-32,-33,-34,-89,-107,60,60,-61,60,-103,-104,-105,-106,-90,-109,-111,-112,-113,-114,-115,-21,-22,-25,-26,60,-60,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,60,60,83,83,83,60,60,60,60,-108,-110,83,60,83,-117,83,-57,83,83,83,83,83,-91,-116,60,60,60,60,83,-55,83,-3,60,60,60,-56,-41,-42,-43,-3,60,83,83,-44,-46,-35,83,60,-47,83,-45,]),'DECIMAL':([24,31,37,38,39,40,41,46,47,49,55,56,57,58,60,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[61,61,-30,-31,-32,-33,-34,61,61,61,-103,-104,-105,-106,119,-21,-22,-25,-26,61,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,61,61,61,61,61,61,61,61,61,61,61,-55,-3,61,61,61,-56,-41,-42,-43,-3,61,-44,-46,-35,61,-47,-45,]),'CHARACTER':([24,31,37,38,39,40,41,46,47,49,55,56,57,58,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[62,62,-30,-31,-32,-33,-34,62,62,62,-103,-104,-105,-106,-21,-22,-25,-26,62,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,62,62,62,62,62,62,62,62,62,62,62,-55,-3,62,62,62,-56,-41,-42,-43,-3,62,-44,-46,-35,62,-47,-45,]),'STRING':([24,31,37,38,39,40,41,46,47,49,55,56,57,58,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[63,63,-30,-31,-32,-33,-34,63,63,63,-103,-104,-105,-106,-21,-22,-25,-26,63,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,63,63,63,63,63,63,63,63,63,63,63,-55,-3,63,63,63,-56,-41,-42,-43,-3,63,-44,-46,-35,63,-47,-45,]),'TRUE':([24,31,37,38,39,40,41,46,47,49,55,56,57,58,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[64,64,-30,-31,-32,-33,-34,64,64,64,-103,-104,-105,-106,-21,-22,-25,-26,64,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,64,64,64,64,64,64,64,64,64,64,64,-55,-3,64,64,64,-56,-41,-42,-43,-3,64,-44,-46,-35,64,-47,-45,]),'FALSE':([24,31,37,38,39,40,41,46,47,49,55,56,57,58,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,113,114,116,117,122,142,143,144,146,158,160,162,164,165,166,167,168,169,170,177,183,184,186,191,194,198,],[65,65,-30,-31,-32,-33,-34,65,65,65,-103,-104,-105,-106,-21,-22,-25,-26,65,-62,-63,-64,-65,-77,-82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-78,-79,-80,-81,-83,-84,-85,-86,-87,-88,-27,-28,-29,65,65,65,65,65,65,65,65,65,65,65,-55,-3,65,65,65,-56,-41,-42,-43,-3,65,-44,-46,-35,65,-47,-45,]),'LSQUARE':([26,43,106,],[68,107,123,]),'SEMICOLON':([32,33,34,35,36,43,44,48,49,57,58,59,61,62,63,64,65,66,75,80,81,106,109,111,112,113,118,119,121,126,129,130,131,132,133,138,140,141,144,149,152,155,156,157,163,178,],[72,73,103,104,105,-89,-107,-61,-93,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,-94,-98,-59,-92,-3,-108,-110,-58,-117,-57,144,-48,-49,-50,-95,-91,-116,-3,-96,-99,165,-51,-52,-100,-97,]),'PLUS':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[82,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,82,82,82,-108,-110,82,82,-117,82,-57,82,82,82,82,82,-91,-116,82,82,82,82,82,82,]),'MULTI':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[84,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,84,84,84,-108,-110,84,84,-117,84,-57,84,84,84,84,84,-91,-116,84,84,84,84,84,84,]),'DIVIDE':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[85,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,85,85,85,-108,-110,85,85,-117,85,-57,85,85,85,85,85,-91,-116,85,85,85,85,85,85,]),'EQUAL':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,106,109,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,149,157,159,178,182,189,195,],[86,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,122,128,86,86,86,-108,-110,86,86,-117,86,-57,86,86,86,86,86,-91,-116,162,86,86,86,86,86,86,]),'PLUSEQU':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[87,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,87,87,87,-108,-110,87,87,-117,87,-57,87,87,87,87,87,-91,-116,87,87,87,87,87,87,]),'MINUSEQU':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[88,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,88,88,88,-108,-110,88,88,-117,88,-57,88,88,88,88,88,-91,-116,88,88,88,88,88,88,]),'MULTIEQU':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[89,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,89,89,89,-108,-110,89,89,-117,89,-57,89,89,89,89,89,-91,-116,89,89,89,89,89,89,]),'DIVIDEQU':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[90,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,90,90,90,-108,-110,90,90,-117,90,-57,90,90,90,90,90,-91,-116,90,90,90,90,90,90,]),'AND':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[91,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,91,91,91,-108,-110,91,91,-117,91,-57,91,91,91,91,91,-91,-116,91,91,91,91,91,91,]),'OR':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[92,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,92,92,92,-108,-110,92,92,-117,92,-57,92,92,92,92,92,-91,-116,92,92,92,92,92,92,]),'BAND':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[93,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,93,93,93,-108,-110,93,93,-117,93,-57,93,93,93,93,93,-91,-116,93,93,93,93,93,93,]),'BOR':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[94,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,94,94,94,-108,-110,94,94,-117,94,-57,94,94,94,94,94,-91,-116,94,94,94,94,94,94,]),'BANDEQU':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[95,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,95,95,95,-108,-110,95,95,-117,95,-57,95,95,95,95,95,-91,-116,95,95,95,95,95,95,]),'BOREQU':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[96,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,96,96,96,-108,-110,96,96,-117,96,-57,96,96,96,96,96,-91,-116,96,96,96,96,96,96,]),'CEQ':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[97,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,97,97,97,-108,-110,97,97,-117,97,-57,97,97,97,97,97,-91,-116,97,97,97,97,97,97,]),'CNEQ':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[98,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,98,98,98,-108,-110,98,98,-117,98,-57,98,98,98,98,98,-91,-116,98,98,98,98,98,98,]),'CGT':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[99,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,99,99,99,-108,-110,99,99,-117,99,-57,99,99,99,99,99,-91,-116,99,99,99,99,99,99,]),'CLT':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[100,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,100,100,100,-108,-110,100,100,-117,100,-57,100,100,100,100,100,-91,-116,100,100,100,100,100,100,]),'CGE':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[101,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,101,101,101,-108,-110,101,101,-117,101,-57,101,101,101,101,101,-91,-116,101,101,101,101,101,101,]),'CLE':([33,43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,110,111,112,118,119,121,124,126,127,129,133,134,136,137,138,140,141,157,159,178,182,189,195,],[102,-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,102,102,102,-108,-110,102,102,-117,102,-57,102,102,102,102,102,-91,-116,102,102,102,102,102,102,]),'RSQUARE':([43,44,48,57,58,59,61,62,63,64,65,66,68,75,80,81,111,118,119,121,124,126,129,139,140,141,],[-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,120,-60,-103,-104,-59,-108,-110,-58,140,-117,-57,149,-91,-116,]),'COLON':([43,44,48,57,58,59,61,62,63,64,65,66,75,80,81,111,118,119,121,126,129,140,141,176,189,],[-89,-107,-61,-105,-106,-90,-109,-111,-112,-113,-114,-115,-60,-103,-104,-59,-108,-110,-58,-117,-57,-91,-116,188,193,]),'ELSE':([69,70,160,170,198,],[-21,-22,171,171,-45,]),'DEFAULT':([69,70,161,175,196,],[-21,-22,176,176,-39,]),'CASE':([69,70,161,175,196,],[-21,-22,177,177,-39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,4,],[2,14,]),'e':([0,24,113,144,160,161,165,170,175,],[3,29,131,156,168,173,181,168,173,]),'function':([0,4,],[4,4,]),'func_ret':([0,4,],[5,5,]),'var_type':([0,4,16,24,25,31,113,],[8,8,20,42,20,42,42,]),'params':([16,25,],[17,67,]),'param':([16,25,],[19,19,]),'block':([18,22,52,145,147,171,188,190,193,197,],[23,28,115,158,160,184,192,194,196,198,]),'statements':([24,31,],[30,71,]),'statement':([24,31,],[31,31,]),'declaration':([24,31,113,],[32,32,132,]),'expression':([24,31,46,47,49,74,107,108,113,114,116,117,122,142,144,146,162,165,177,191,],[33,33,110,111,112,121,124,127,133,134,136,137,138,127,157,159,178,182,189,195,]),'return':([24,31,],[34,34,]),'for_block':([24,31,],[37,37,]),'while_block':([24,31,],[38,38,]),'do_while_block':([24,31,],[39,39,]),'if_block':([24,31,],[40,40,]),'switch_block':([24,31,],[41,41,]),'unary':([24,31,33,46,47,49,74,107,108,110,111,112,113,114,116,117,121,122,124,127,133,134,136,137,138,142,144,146,157,159,162,165,177,178,182,189,191,195,],[47,47,75,47,47,47,47,47,47,75,75,75,47,47,47,47,75,47,75,75,75,75,75,75,75,47,47,47,75,75,47,47,47,75,75,75,47,75,]),'operand':([24,31,46,47,49,74,107,108,113,114,116,117,122,142,144,146,162,165,177,191,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'variable':([24,31,46,47,49,74,107,108,113,114,116,117,122,142,143,144,146,162,164,165,177,191,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,154,59,59,59,154,59,59,59,]),'func_call':([24,31,46,47,49,74,107,108,113,114,116,117,122,142,143,144,146,162,164,165,177,191,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'operator':([33,110,111,112,121,124,127,133,134,136,137,138,157,159,178,182,189,195,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'operator_calc':([33,110,111,112,121,124,127,133,134,136,137,138,157,159,178,182,189,195,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'operator_boolean':([33,110,111,112,121,124,127,133,134,136,137,138,157,159,178,182,189,195,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'operator_bit':([33,110,111,112,121,124,127,133,134,136,137,138,157,159,178,182,189,195,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'operator_cond':([33,110,111,112,121,124,127,133,134,136,137,138,157,159,178,182,189,195,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'args':([108,142,],[125,150,]),'for_init':([113,],[130,]),'aggregation':([143,164,],[153,179,]),'for_cond':([144,],[155,]),'elif_blocks':([160,170,],[167,183,]),'else_block':([160,170,],[169,169,]),'elif_block':([160,170,],[170,170,]),'case_blocks':([161,175,],[172,187,]),'default_block':([161,175,],[174,174,]),'case_block':([161,175,],[175,175,]),'for_update':([165,],[180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions','program',1,'p_program','yacc.py',21),
  ('program -> e','program',1,'p_program','yacc.py',22),
  ('e -> <empty>','e',0,'p_e','yacc.py',28),
  ('functions -> function','functions',1,'p_functions','yacc.py',34),
  ('functions -> function functions','functions',2,'p_functions','yacc.py',35),
  ('function -> func_ret IDENTIFIER LPAREN params RPAREN block','function',6,'p_function','yacc.py',41),
  ('function -> func_ret IDENTIFIER LPAREN RPAREN block','function',5,'p_function','yacc.py',42),
  ('func_ret -> VOID','func_ret',1,'p_func_ret','yacc.py',48),
  ('func_ret -> ARRAY','func_ret',1,'p_func_ret','yacc.py',49),
  ('func_ret -> var_type','func_ret',1,'p_func_ret','yacc.py',50),
  ('var_type -> INT','var_type',1,'p_var_type','yacc.py',56),
  ('var_type -> DOUBLE','var_type',1,'p_var_type','yacc.py',57),
  ('var_type -> FLOAT','var_type',1,'p_var_type','yacc.py',58),
  ('var_type -> CHAR','var_type',1,'p_var_type','yacc.py',59),
  ('var_type -> BOOL','var_type',1,'p_var_type','yacc.py',60),
  ('params -> param','params',1,'p_params','yacc.py',66),
  ('params -> param COMMA params','params',3,'p_params','yacc.py',67),
  ('param -> var_type IDENTIFIER','param',2,'p_param','yacc.py',73),
  ('param -> var_type IDENTIFIER LSQUARE RSQUARE','param',4,'p_param','yacc.py',74),
  ('param -> ARRAY IDENTIFIER','param',2,'p_param','yacc.py',75),
  ('block -> LBRACE e RBRACE','block',3,'p_block','yacc.py',81),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','yacc.py',82),
  ('statements -> statement','statements',1,'p_statements','yacc.py',88),
  ('statements -> statement statements','statements',2,'p_statements','yacc.py',89),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','yacc.py',95),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','yacc.py',96),
  ('statement -> return SEMICOLON','statement',2,'p_statement','yacc.py',97),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','yacc.py',98),
  ('statement -> CONTINUE SEMICOLON','statement',2,'p_statement','yacc.py',99),
  ('statement -> for_block','statement',1,'p_statement','yacc.py',100),
  ('statement -> while_block','statement',1,'p_statement','yacc.py',101),
  ('statement -> do_while_block','statement',1,'p_statement','yacc.py',102),
  ('statement -> if_block','statement',1,'p_statement','yacc.py',103),
  ('statement -> switch_block','statement',1,'p_statement','yacc.py',104),
  ('switch_block -> SWITCH LPAREN expression RPAREN LBRACE case_blocks RBRACE','switch_block',7,'p_switch_block','yacc.py',110),
  ('case_blocks -> e','case_blocks',1,'p_case_blocks','yacc.py',116),
  ('case_blocks -> default_block','case_blocks',1,'p_case_blocks','yacc.py',117),
  ('case_blocks -> case_block case_blocks','case_blocks',2,'p_case_blocks','yacc.py',118),
  ('case_block -> CASE expression COLON block','case_block',4,'p_case_block','yacc.py',124),
  ('default_block -> DEFAULT COLON block','default_block',3,'p_default_block','yacc.py',130),
  ('if_block -> IF LPAREN expression RPAREN block elif_blocks','if_block',6,'p_if_block','yacc.py',136),
  ('elif_blocks -> e','elif_blocks',1,'p_elif_blocks','yacc.py',142),
  ('elif_blocks -> else_block','elif_blocks',1,'p_elif_blocks','yacc.py',143),
  ('elif_blocks -> elif_block elif_blocks','elif_blocks',2,'p_elif_blocks','yacc.py',144),
  ('elif_block -> ELSE IF LPAREN expression RPAREN block','elif_block',6,'p_elif_block','yacc.py',150),
  ('else_block -> ELSE block','else_block',2,'p_else_block','yacc.py',156),
  ('for_block -> FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_update RPAREN block','for_block',9,'p_for_block','yacc.py',162),
  ('for_init -> e','for_init',1,'p_for_init','yacc.py',168),
  ('for_init -> declaration','for_init',1,'p_for_init','yacc.py',169),
  ('for_init -> expression','for_init',1,'p_for_init','yacc.py',170),
  ('for_cond -> e','for_cond',1,'p_for_cond','yacc.py',176),
  ('for_cond -> expression','for_cond',1,'p_for_cond','yacc.py',177),
  ('for_update -> e','for_update',1,'p_for_update','yacc.py',183),
  ('for_update -> expression','for_update',1,'p_for_update','yacc.py',184),
  ('while_block -> WHILE LPAREN expression RPAREN block','while_block',5,'p_while_block','yacc.py',190),
  ('do_while_block -> DO block WHILE LPAREN expression RPAREN','do_while_block',6,'p_do_while_block','yacc.py',196),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','yacc.py',202),
  ('expression -> expression operator expression','expression',3,'p_expression','yacc.py',203),
  ('expression -> unary expression','expression',2,'p_expression','yacc.py',204),
  ('expression -> expression unary','expression',2,'p_expression','yacc.py',205),
  ('expression -> operand','expression',1,'p_expression','yacc.py',206),
  ('operator -> operator_calc','operator',1,'p_operator','yacc.py',212),
  ('operator -> operator_boolean','operator',1,'p_operator','yacc.py',213),
  ('operator -> operator_bit','operator',1,'p_operator','yacc.py',214),
  ('operator -> operator_cond','operator',1,'p_operator','yacc.py',215),
  ('operator_calc -> PLUS','operator_calc',1,'p_operator_calc','yacc.py',221),
  ('operator_calc -> MINUS','operator_calc',1,'p_operator_calc','yacc.py',222),
  ('operator_calc -> MULTI','operator_calc',1,'p_operator_calc','yacc.py',223),
  ('operator_calc -> DIVIDE','operator_calc',1,'p_operator_calc','yacc.py',224),
  ('operator_calc -> EQUAL','operator_calc',1,'p_operator_calc','yacc.py',225),
  ('operator_calc -> PLUSEQU','operator_calc',1,'p_operator_calc','yacc.py',226),
  ('operator_calc -> MINUSEQU','operator_calc',1,'p_operator_calc','yacc.py',227),
  ('operator_calc -> MULTIEQU','operator_calc',1,'p_operator_calc','yacc.py',228),
  ('operator_calc -> DIVIDEQU','operator_calc',1,'p_operator_calc','yacc.py',229),
  ('operator_boolean -> AND','operator_boolean',1,'p_operator_boolean','yacc.py',235),
  ('operator_boolean -> OR','operator_boolean',1,'p_operator_boolean','yacc.py',236),
  ('operator_boolean -> NOT','operator_boolean',1,'p_operator_boolean','yacc.py',237),
  ('operator_bit -> BAND','operator_bit',1,'p_operator_bit','yacc.py',243),
  ('operator_bit -> BOR','operator_bit',1,'p_operator_bit','yacc.py',244),
  ('operator_bit -> BANDEQU','operator_bit',1,'p_operator_bit','yacc.py',245),
  ('operator_bit -> BOREQU','operator_bit',1,'p_operator_bit','yacc.py',246),
  ('operator_bit -> INV','operator_bit',1,'p_operator_bit','yacc.py',247),
  ('operator_cond -> CEQ','operator_cond',1,'p_operator_cond','yacc.py',253),
  ('operator_cond -> CNEQ','operator_cond',1,'p_operator_cond','yacc.py',254),
  ('operator_cond -> CGT','operator_cond',1,'p_operator_cond','yacc.py',255),
  ('operator_cond -> CLT','operator_cond',1,'p_operator_cond','yacc.py',256),
  ('operator_cond -> CGE','operator_cond',1,'p_operator_cond','yacc.py',257),
  ('operator_cond -> CLE','operator_cond',1,'p_operator_cond','yacc.py',258),
  ('operand -> IDENTIFIER','operand',1,'p_operand','yacc.py',264),
  ('operand -> variable','operand',1,'p_operand','yacc.py',265),
  ('operand -> IDENTIFIER LSQUARE expression RSQUARE','operand',4,'p_operand','yacc.py',266),
  ('return -> RETURN expression','return',2,'p_return','yacc.py',272),
  ('return -> RETURN','return',1,'p_return','yacc.py',273),
  ('declaration -> var_type IDENTIFIER','declaration',2,'p_declaration','yacc.py',279),
  ('declaration -> var_type IDENTIFIER EQUAL expression','declaration',4,'p_declaration','yacc.py',280),
  ('declaration -> var_type IDENTIFIER LSQUARE NUMBER RSQUARE','declaration',5,'p_declaration','yacc.py',281),
  ('declaration -> var_type IDENTIFIER LSQUARE NUMBER RSQUARE EQUAL expression','declaration',7,'p_declaration','yacc.py',282),
  ('declaration -> ARRAY IDENTIFIER','declaration',2,'p_declaration','yacc.py',283),
  ('declaration -> ARRAY IDENTIFIER EQUAL LBRACE RBRACE','declaration',5,'p_declaration','yacc.py',284),
  ('declaration -> ARRAY IDENTIFIER EQUAL LBRACE aggregation RBRACE','declaration',6,'p_declaration','yacc.py',285),
  ('aggregation -> variable','aggregation',1,'p_aggregation','yacc.py',291),
  ('aggregation -> variable COMMA aggregation','aggregation',3,'p_aggregation','yacc.py',292),
  ('unary -> NOT','unary',1,'p_unary','yacc.py',298),
  ('unary -> INV','unary',1,'p_unary','yacc.py',299),
  ('unary -> PLUSELF','unary',1,'p_unary','yacc.py',300),
  ('unary -> MINUSELF','unary',1,'p_unary','yacc.py',301),
  ('variable -> NUMBER','variable',1,'p_variable','yacc.py',307),
  ('variable -> MINUS NUMBER','variable',2,'p_variable','yacc.py',308),
  ('variable -> DECIMAL','variable',1,'p_variable','yacc.py',309),
  ('variable -> MINUS DECIMAL','variable',2,'p_variable','yacc.py',310),
  ('variable -> CHARACTER','variable',1,'p_variable','yacc.py',311),
  ('variable -> STRING','variable',1,'p_variable','yacc.py',312),
  ('variable -> TRUE','variable',1,'p_variable','yacc.py',313),
  ('variable -> FALSE','variable',1,'p_variable','yacc.py',314),
  ('variable -> func_call','variable',1,'p_variable','yacc.py',315),
  ('func_call -> IDENTIFIER LPAREN args RPAREN','func_call',4,'p_func_call','yacc.py',321),
  ('func_call -> IDENTIFIER LPAREN RPAREN','func_call',3,'p_func_call','yacc.py',322),
  ('args -> expression','args',1,'p_args','yacc.py',328),
  ('args -> expression COMMA args','args',3,'p_args','yacc.py',329),
]
